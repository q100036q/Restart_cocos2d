//创建漂浮的物体
HelloWorldScene.h
class HelloWorld : public cocos2d::Layer
{
//********
public:
	//重载一个Rect作为漂浮物体，从外界传入位置和类型
	void addRect(float x,float y,b2BodyType type);
}

HelloWorldScene.cpp
bool HelloWorld::init()
{
//***********
	//后面出了各种错误就在于我把这段注释了，导致堆栈错误，就这个原因，卡了我一个礼拜
	//创建了一个物理世界，加速度向下
	world = new b2World(b2Vec(0,-10));
	addRect();
	//这是动态物体，与之前一样，将会落下
	addRect(5,5,b2_dynamicBody);
	//这是漂浮物体，不会落下
	addRect(1,5,b2_kinematicBody);
	addGround();
}	



void HelloWorld::addRect(float PositionX,float PositionY,b2BodyType type)
{
	//config box2d
	b2BodyDef def;
	def.position = b2Vec2(PositionX,PositionY);
	//给漂浮物体设置一个初速度，x方向每秒一米
	def.linearVelocity = b2Vec2(1,0);
	def.type = type;
	b2Body* body = world->CreateBody(&def);

	b2PolygonShape shape;
	shape.SetAsBox(0.5,0.5);

	b2FixtureDef fixtureDef;
	fixtureDef.density = 1;
	fixtureDef.friction = 0.3;
	fixtureDef.shape = &shape;
	body->CreateFixture(&fixtureDef);
	//config cocos shape
	auto s = Sprite::create();
	s->setTextureRect(Rect(0,0,0.5*2*RADIO,0.5*2*RADIO));
	addChild(s);

	//setPosition(Point(def.position.x*RADIO,def.position.y*RADIO));
	body->SetUserData(s);
	
}

void HelloWorld::update(float dt)
{
//一步步模拟世界，Step第一个参数是当前一步与最后一步时间差，刚好是update传入的当前一帧与上一帧的时间差一样
//第二个参数是速度迭代，物理事件模拟时难免出现误差，用速度迭代重新计算来避免误差，速度越多越精确，也越耗资源，官方推荐是8，比较准确，后面参数是位置迭代，官方建议3
	world->Step(dt,8,3);
	//定义一个Sprite接收矩形
	Sprite *s;
	//用for循环对所有子集对象进行遍历
	for(b2Body *b = world->GetBodyList();b;b=b->GetNext())
	{
	/*这里开始取消这个判断，因为传入类型不一定是动态的
		//因为只定义了一个动态物体，这里直接用判断
		if(b->GetType()==b2_dynamicBody)
		{
			//获取y的位置
			//log("%f",b->GetPosition().y);
			//如果有值，即获取到了Sprite
	*/
			if(b->GetUserData())
			{
				s = (Sprite*)b->GetUserData();
				//配置图形同步
				s->setPosition(Point(b->GetPosition().x*RADIO,b->GetPosition().y*RADIO));
			}
		//}
	}
}
